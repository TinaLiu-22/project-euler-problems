// Problem 8

/*
	The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

			73167176531330624919225119674426574742355349194934
			96983520312774506326239578318016984801869478851843
			85861560789112949495459501737958331952853208805511
			12540698747158523863050715693290963295227443043557
			66896648950445244523161731856403098711121722383113
			62229893423380308135336276614282806444486645238749
			30358907296290491560440772390713810515859307960866
			70172427121883998797908792274921901699720888093776
			65727333001053367881220235421809751254540594752243
			52584907711670556013604839586446706324415722155397
			53697817977846174064955149290862569321978468622482
			83972241375657056057490261407972968652414535100474
			82166370484403199890008895243450658541227588666881
			16427171479924442928230863465674813919123162824586
			17866458359124566529476545682848912883142607690042
			24219022671055626321111109370544217506941658960408
			07198403850962455444362981230987879927244284909188
			84580156166097919133875499200524063689912560717606
			05886116467109405077541002256983155200055935729725
			71636269561882670428252483600823257530420752963450

	Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

var d = new Date();
var start = d.getTime();
var last = 0;
var timeAcc = 0;

// Could have done this better... but oh well.
var block = "" + 			
			731671765313306+249192251+196744265+74742355349194934 
			+9698352031277+450632623957+83180169848018694+78851843 +
			8586156078+91129494954595+01737958331952853+208805511 +
			125406987+471585238630507+15693290963295227+443043557 +
			668966+489504452445231617+318564030987111217+22383113 +
			6222989+34233803081353362+766142828064444866+45238749 +
			30358907296+2904915604407+72390713810515+859307960866 +
			701724271218+839987979087+92274921901699+720888093776 +
			657273330010+533678812202+354218097512545+40594752243 +
			52584907711+6705560136048+39586446706324415722155397 +
			536978179778+461740649551+4929086256932+1978468622482 +
			83972241375+6570560574902+6140797296865+2414535100474 +
			8216637048440+31998900088+9524345065854+1227588666881 + 
			164271714+799244429282308+6346567481391912+3162824586 +
			17866458359+1245665294765+45682848912883+142607690042 +
			242190226710+556263211111+0937054421750+6941658960408 +
			071984038509+624554443629+81230987879927+244284909188 +
			845801561660+979191338754+99200524063689+912560717606 +
			05886116467+094050775410+0225698315520+0055935729725 +
			71636269561+8826704282524+8360082325753+0420752963450;

function adjProduct(num) {
	
	var factors = "";
	var max = 0;
	var idx = 0;
	
	while(num + idx < block.length) { // Move in covers of #num digits.
		
		var substring = block.substring(idx, num + idx).split(""); // Get #num digits from block and split them up by individual digit.
		var product = substring.reduce(function (x,y) { return (+x)*(+y); }); // Get the product of these digits. 
		
		if (product > max) { // If we found a new maximum.
			max = product;
			factors = substring; // Keep track of the #num digits that makes this max product.
		}
		
		idx++; // Next #num string.
		
		d = new Date();
		timeAcc += d.getTime() - start - last;
		last = d.getTime() - start;
		
		if (timeAcc/1000 > 1) {
			timeAcc -= 1000;
			console.clear();
			console.log(Math.floor(last/1000) + " seconds have passed.");
		}
	}
	
	return [max, factors, idx, num+idx];
}
			
function main() {
	var num = 13;
	var result = adjProduct(num);
	console.log("Result: " + result[0] + " (Product of " + result[1]
						   + " / From " + result[2] + " to " + result[3] + ")");
	console.log("It took " + (last/1000) + " seconds.");
}

main();